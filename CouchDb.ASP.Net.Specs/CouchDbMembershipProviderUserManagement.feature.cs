// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.4.0.0
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace CouchDb.ASP.Net.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("CouchDBMembershipProvider User Managing")]
    public partial class CouchDBMembershipProviderUserManagingFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CouchDbMembershipProviderUserManagement.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CouchDBMembershipProvider User Managing", "In order be able to use Couch DB with ASP.NET\nAs an ASP.NET programmer\nI want to " +
                    "be able to use CouchDbMembershipProvider to manage my site\'s users", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a new user to the Membership Database with only the UserName and Password")]
        [NUnit.Framework.CategoryAttribute("UserCreation")]
        public virtual void AddANewUserToTheMembershipDatabaseWithOnlyTheUserNameAndPassword()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a new user to the Membership Database with only the UserName and Password", new string[] {
                        "UserCreation"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I have the data available to define a new application user, the userName and Pass" +
                    "word");
#line 9
 testRunner.When("I call the Membership API to create the user");
#line 10
 testRunner.Then("the Membership API must respond with a valid user with a new generated ProviderUs" +
                    "erKey");
#line 11
 testRunner.And("the Membership API should create the user with a hashed password");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The provider grants access to the user given his valid UserName and Password")]
        [NUnit.Framework.CategoryAttribute("UserValidation")]
        public virtual void TheProviderGrantsAccessToTheUserGivenHisValidUserNameAndPassword()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The provider grants access to the user given his valid UserName and Password", new string[] {
                        "UserValidation"});
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
 testRunner.Given("a user\'s UserName and Password");
#line 16
 testRunner.When("I call the ValidateUser Membership API");
#line 17
 testRunner.Then("the response is that the user is valid");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The provider denies access to the user given his valid UserName but invalid Passw" +
            "ord")]
        [NUnit.Framework.CategoryAttribute("UserValidation")]
        public virtual void TheProviderDeniesAccessToTheUserGivenHisValidUserNameButInvalidPassword()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The provider denies access to the user given his valid UserName but invalid Passw" +
                    "ord", new string[] {
                        "UserValidation"});
#line 20
this.ScenarioSetup(scenarioInfo);
#line 21
 testRunner.Given("a user\'s UserName and Invalid Password");
#line 22
 testRunner.When("I call the ValidateUser Membership API passing the invalid password");
#line 23
 testRunner.Then("the response is that the user is invalid");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Retrieve the list of all the users in the database")]
        [NUnit.Framework.CategoryAttribute("UserRetrieval")]
        public virtual void RetrieveTheListOfAllTheUsersInTheDatabase()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Retrieve the list of all the users in the database", new string[] {
                        "UserRetrieval"});
#line 27
this.ScenarioSetup(scenarioInfo);
#line 28
 testRunner.Given("A configured Membership application");
#line 29
 testRunner.When("I call the GetAllUsers method in the Membership API");
#line 30
 testRunner.Then("I should get a collection with all the users defined in the database");
#line 31
 testRunner.And("Each user in the collection must be of type CouchDbMembershipUser");
#line 32
 testRunner.And("Each user in the collection musts have a unique ID and UserName");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Retrieve a known user\'s data")]
        [NUnit.Framework.CategoryAttribute("UserRetrieval")]
        public virtual void RetrieveAKnownUserSData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Retrieve a known user\'s data", new string[] {
                        "UserRetrieval"});
#line 35
this.ScenarioSetup(scenarioInfo);
#line 36
 testRunner.Given("a known user name");
#line 37
 testRunner.When("I call the GetUser Membership API passing the user name");
#line 38
 testRunner.Then("the user\'s data is returned as a CouchDBMembershipUser object");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Retrieve a known user\'s UserName by his email address")]
        [NUnit.Framework.CategoryAttribute("UserRetrieval")]
        public virtual void RetrieveAKnownUserSUserNameByHisEmailAddress()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Retrieve a known user\'s UserName by his email address", new string[] {
                        "UserRetrieval"});
#line 41
this.ScenarioSetup(scenarioInfo);
#line 42
 testRunner.Given("a known email address");
#line 43
 testRunner.When("I call the GetUser Membership API passing the email");
#line 44
 testRunner.Then("the user\'s UserName is returned");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not create a new user with a duplicate UserName")]
        [NUnit.Framework.CategoryAttribute("UserCreationFailure")]
        public virtual void CanNotCreateANewUserWithADuplicateUserName()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not create a new user with a duplicate UserName", new string[] {
                        "UserCreationFailure"});
#line 47
this.ScenarioSetup(scenarioInfo);
#line 48
 testRunner.Given("a known user");
#line 49
 testRunner.When("I try to create a new user with the same UserName");
#line 50
 testRunner.Then("the user creation operation fails");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not create a new user with a duplicate email address")]
        [NUnit.Framework.CategoryAttribute("UserCreationFailure")]
        public virtual void CanNotCreateANewUserWithADuplicateEmailAddress()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not create a new user with a duplicate email address", new string[] {
                        "UserCreationFailure"});
#line 53
this.ScenarioSetup(scenarioInfo);
#line 54
 testRunner.Given("a known user\'s email address");
#line 55
 testRunner.When("I try to create a new user with the same email");
#line 56
 testRunner.Then("the user creation operation fails for that email");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A user can change his password")]
        [NUnit.Framework.CategoryAttribute("UserPasswordManagement")]
        public virtual void AUserCanChangeHisPassword()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A user can change his password", new string[] {
                        "UserPasswordManagement"});
#line 59
this.ScenarioSetup(scenarioInfo);
#line 60
 testRunner.Given("a valid username and password");
#line 61
 testRunner.When("the user requests to change his password");
#line 62
 testRunner.Then("the password change operation succeds");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A user can be deleted from the database")]
        [NUnit.Framework.CategoryAttribute("UserDeletion")]
        public virtual void AUserCanBeDeletedFromTheDatabase()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A user can be deleted from the database", new string[] {
                        "UserDeletion"});
#line 65
this.ScenarioSetup(scenarioInfo);
#line 66
 testRunner.Given("a valid username");
#line 67
 testRunner.When("I call the DeleteUser method on the MemberchipProvider");
#line 68
 testRunner.Then("all the user\'s data is deleted");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion

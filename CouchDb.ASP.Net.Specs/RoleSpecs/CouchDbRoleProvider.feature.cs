// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.4.0.0
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace CouchDb.ASP.Net.Specs.RoleSpecs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("CouchDb role provider for ASP.NET")]
    public partial class CouchDbRoleProviderForASP_NETFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CouchDbRoleProvider.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CouchDb role provider for ASP.NET", "Role Provider to use with ASP.NET Membership\nHaving the role data kept in Couch D" +
                    "b", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a new role to the database")]
        [NUnit.Framework.CategoryAttribute("Role_management")]
        public virtual void AddANewRoleToTheDatabase()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a new role to the database", new string[] {
                        "Role_management"});
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("I have defined a new role");
#line 8
 testRunner.When("I call the CreateRole API");
#line 9
 testRunner.Then("the role is added to the database");
#line 10
 testRunner.And("I can retrieve it using the GetAllRoles API");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Retrieve all the roles defined")]
        [NUnit.Framework.CategoryAttribute("Role_management")]
        public virtual void RetrieveAllTheRolesDefined()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Retrieve all the roles defined", new string[] {
                        "Role_management"});
#line 13
this.ScenarioSetup(scenarioInfo);
#line 14
 testRunner.Given("there are roles defined in the database");
#line 15
 testRunner.When("I call the GetAllRoles API");
#line 16
 testRunner.Then("I receive all the roles defined");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete a role from the database")]
        [NUnit.Framework.CategoryAttribute("Role_management")]
        public virtual void DeleteARoleFromTheDatabase()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete a role from the database", new string[] {
                        "Role_management"});
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.Given("I have a valid role");
#line 21
 testRunner.When("I call the DeleteRole API");
#line 22
 testRunner.Then("the role is deleted");
#line 23
 testRunner.And("I can not retrieve it using the GetAllRoles API");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not delete a role assigned to a user")]
        [NUnit.Framework.CategoryAttribute("Role_management")]
        public virtual void CanNotDeleteARoleAssignedToAUser()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not delete a role assigned to a user", new string[] {
                        "Role_management"});
#line 26
this.ScenarioSetup(scenarioInfo);
#line 27
 testRunner.Given("I have a valid role assigned to a user");
#line 28
 testRunner.When("I call the Delete Role API for that role asking for an exception if the role is i" +
                    "n use");
#line 29
 testRunner.Then("a ProviderException is thrown");
#line 30
 testRunner.And("I can still retrieve the role using the GetAllRoles API");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The user can check if a give role exists using the Role API")]
        [NUnit.Framework.CategoryAttribute("Role_management")]
        public virtual void TheUserCanCheckIfAGiveRoleExistsUsingTheRoleAPI()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The user can check if a give role exists using the Role API", new string[] {
                        "Role_management"});
#line 33
this.ScenarioSetup(scenarioInfo);
#line 34
 testRunner.Given("I have a valid role name");
#line 35
 testRunner.When("I call the RoleExists API");
#line 36
 testRunner.Then("the API response is true");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The user can verify that an invalid row does\'nt exist")]
        [NUnit.Framework.CategoryAttribute("Role_management")]
        public virtual void TheUserCanVerifyThatAnInvalidRowDoesNtExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The user can verify that an invalid row does\'nt exist", new string[] {
                        "Role_management"});
#line 39
this.ScenarioSetup(scenarioInfo);
#line 40
 testRunner.Given("I have an invalid role name");
#line 41
 testRunner.When("I call the RoleExists API on that name");
#line 42
 testRunner.Then("the API response is false");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A user can be assigned to one or more roles")]
        [NUnit.Framework.CategoryAttribute("User_roles")]
        public virtual void AUserCanBeAssignedToOneOrMoreRoles()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A user can be assigned to one or more roles", new string[] {
                        "User_roles"});
#line 45
this.ScenarioSetup(scenarioInfo);
#line 46
 testRunner.Given("I have a valid CouchDbMembershipUser");
#line 47
 testRunner.When("I assign a role to a user");
#line 48
 testRunner.Then("I can check that the user has the role");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A user has been assigned to one or more roles and I need to know which are those " +
            "roles")]
        [NUnit.Framework.CategoryAttribute("User_roles")]
        public virtual void AUserHasBeenAssignedToOneOrMoreRolesAndINeedToKnowWhichAreThoseRoles()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A user has been assigned to one or more roles and I need to know which are those " +
                    "roles", new string[] {
                        "User_roles"});
#line 51
this.ScenarioSetup(scenarioInfo);
#line 52
 testRunner.Given("I have a valid CouchDbMembershipUser with roles assigned");
#line 53
 testRunner.When("I call the GetRolesForUser API");
#line 54
 testRunner.Then("I get a list of all the roles assigned to the user");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A user can be removed from a role")]
        [NUnit.Framework.CategoryAttribute("User_roles")]
        public virtual void AUserCanBeRemovedFromARole()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A user can be removed from a role", new string[] {
                        "User_roles"});
#line 57
this.ScenarioSetup(scenarioInfo);
#line 58
 testRunner.Given("I have a valid user with roles assigned");
#line 59
 testRunner.When("I call the RemoveFromRole API");
#line 60
 testRunner.Then("the user is not assigned to that role anymore");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can retrieve all the users assigned to a role")]
        [NUnit.Framework.CategoryAttribute("User_roles")]
        public virtual void CanRetrieveAllTheUsersAssignedToARole()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can retrieve all the users assigned to a role", new string[] {
                        "User_roles"});
#line 63
this.ScenarioSetup(scenarioInfo);
#line 64
 testRunner.Given("I have valid users with roles assigned");
#line 65
 testRunner.When("I call the GetUsersInRole API");
#line 66
 testRunner.Then("I get a list of all the users in that role");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
